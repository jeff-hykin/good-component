// Generated by CoffeeScript 2.3.1
var Vue, originalAppendChild, window;

Vue = require("vue").default;

require("good-jsx");

if (typeof window === void 0) {
  window = {};
}


// override the build in appendChild so that it renders Vue components as elements

originalAppendChild = window.HTMLElement.prototype.appendChild;

window.HTMLElement.prototype.appendChild = function(element) {
  if (element instanceof Node) {
    return originalAppendChild.apply(this, [element]);
  } else if (element.$element instanceof Node) {
    return originalAppendChild.apply(this, [element.$element]);
  } else if (element.$mount instanceof Function) {
    element.$mount();
    return originalAppendChild.apply(this, [element.$element]);
  } else {
    return originalAppendChild.apply(this, [element]);
  }
};

// Convert Vue components into their HTML Nodes when they are JSX
window.jsxChain.push(function(key, properties, ...children) {
  var newElement;
  if (key instanceof Function) {
    if (!!key.prototype && !!key.prototype.constructor.name) {
      newElement = new key({...properties, children});
      if (newElement._isMounted === false) {
        newElement.$mount();
        return newElement.$element;
      }
      return newElement;
    } else {
      return key({
        ...properties,
        children: children
      });
    }
  }
});

module.exports = function(obj) {
  obj.render = function(h, ...args) {
    var each;
    if (!this._isMounted) {
// evaluate each of the props
// otherwise when they are changed, the update function will never be called
// (because of Vue.js magic/optimizations that I don't fully understand)
      for (each in obj.props) {
        this[each];
      }
      return this.$element = obj.dom.apply(this);
    } else {
      // all of the other times the component is rendered
      return (obj.update instanceof Function) && obj.update.apply(this, args);
    }
  };
  return Vue.extend(obj);
};
